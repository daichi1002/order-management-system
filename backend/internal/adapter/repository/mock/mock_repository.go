// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/adapter/repository/repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/daichi1002/order-management-system/backend/internal/domain/model"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMenuRepository is a mock of MenuRepository interface.
type MockMenuRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMenuRepositoryMockRecorder
}

// MockMenuRepositoryMockRecorder is the mock recorder for MockMenuRepository.
type MockMenuRepositoryMockRecorder struct {
	mock *MockMenuRepository
}

// NewMockMenuRepository creates a new mock instance.
func NewMockMenuRepository(ctrl *gomock.Controller) *MockMenuRepository {
	mock := &MockMenuRepository{ctrl: ctrl}
	mock.recorder = &MockMenuRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuRepository) EXPECT() *MockMenuRepositoryMockRecorder {
	return m.recorder
}

// GetMenus mocks base method.
func (m *MockMenuRepository) GetMenus() ([]model.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenus")
	ret0, _ := ret[0].([]model.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenus indicates an expected call of GetMenus.
func (mr *MockMenuRepositoryMockRecorder) GetMenus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenus", reflect.TypeOf((*MockMenuRepository)(nil).GetMenus))
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(ctx context.Context, tx *gorm.DB, order *model.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, tx, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(ctx, tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), ctx, tx, order)
}

// DeleteOrder mocks base method.
func (m *MockOrderRepository) DeleteOrder(ctx context.Context, tx *gorm.DB, id int) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, tx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderRepositoryMockRecorder) DeleteOrder(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderRepository)(nil).DeleteOrder), ctx, tx, id)
}

// GetOrdersWithDetails mocks base method.
func (m *MockOrderRepository) GetOrdersWithDetails(ctx context.Context, dateTime time.Time) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersWithDetails", ctx, dateTime)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersWithDetails indicates an expected call of GetOrdersWithDetails.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersWithDetails(ctx, dateTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersWithDetails", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersWithDetails), ctx, dateTime)
}

// MockOrderItemRepository is a mock of OrderItemRepository interface.
type MockOrderItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderItemRepositoryMockRecorder
}

// MockOrderItemRepositoryMockRecorder is the mock recorder for MockOrderItemRepository.
type MockOrderItemRepositoryMockRecorder struct {
	mock *MockOrderItemRepository
}

// NewMockOrderItemRepository creates a new mock instance.
func NewMockOrderItemRepository(ctrl *gomock.Controller) *MockOrderItemRepository {
	mock := &MockOrderItemRepository{ctrl: ctrl}
	mock.recorder = &MockOrderItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderItemRepository) EXPECT() *MockOrderItemRepositoryMockRecorder {
	return m.recorder
}

// CreateOrderItems mocks base method.
func (m *MockOrderItemRepository) CreateOrderItems(ctx context.Context, tx *gorm.DB, orderItems []*model.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItems", ctx, tx, orderItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderItems indicates an expected call of CreateOrderItems.
func (mr *MockOrderItemRepositoryMockRecorder) CreateOrderItems(ctx, tx, orderItems interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItems", reflect.TypeOf((*MockOrderItemRepository)(nil).CreateOrderItems), ctx, tx, orderItems)
}

// DeleteOrderItems mocks base method.
func (m *MockOrderItemRepository) DeleteOrderItems(ctx context.Context, tx *gorm.DB, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItems", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItems indicates an expected call of DeleteOrderItems.
func (mr *MockOrderItemRepositoryMockRecorder) DeleteOrderItems(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItems", reflect.TypeOf((*MockOrderItemRepository)(nil).DeleteOrderItems), ctx, tx, id)
}

// MockSalesRepository is a mock of SalesRepository interface.
type MockSalesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSalesRepositoryMockRecorder
}

// MockSalesRepositoryMockRecorder is the mock recorder for MockSalesRepository.
type MockSalesRepositoryMockRecorder struct {
	mock *MockSalesRepository
}

// NewMockSalesRepository creates a new mock instance.
func NewMockSalesRepository(ctrl *gomock.Controller) *MockSalesRepository {
	mock := &MockSalesRepository{ctrl: ctrl}
	mock.recorder = &MockSalesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSalesRepository) EXPECT() *MockSalesRepositoryMockRecorder {
	return m.recorder
}

// CreateSales mocks base method.
func (m *MockSalesRepository) CreateSales(tx *gorm.DB, data model.Sales) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSales", tx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSales indicates an expected call of CreateSales.
func (mr *MockSalesRepositoryMockRecorder) CreateSales(tx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSales", reflect.TypeOf((*MockSalesRepository)(nil).CreateSales), tx, data)
}

// GetMonthlySales mocks base method.
func (m *MockSalesRepository) GetMonthlySales(ctx context.Context, month string) ([]model.Sales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlySales", ctx, month)
	ret0, _ := ret[0].([]model.Sales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlySales indicates an expected call of GetMonthlySales.
func (mr *MockSalesRepositoryMockRecorder) GetMonthlySales(ctx, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlySales", reflect.TypeOf((*MockSalesRepository)(nil).GetMonthlySales), ctx, month)
}

// GetSalesByDate mocks base method.
func (m *MockSalesRepository) GetSalesByDate(ctx context.Context, date string) (*model.Sales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalesByDate", ctx, date)
	ret0, _ := ret[0].(*model.Sales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalesByDate indicates an expected call of GetSalesByDate.
func (mr *MockSalesRepositoryMockRecorder) GetSalesByDate(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalesByDate", reflect.TypeOf((*MockSalesRepository)(nil).GetSalesByDate), ctx, date)
}

// UpdateSales mocks base method.
func (m *MockSalesRepository) UpdateSales(tx *gorm.DB, updatedData model.Sales) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSales", tx, updatedData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSales indicates an expected call of UpdateSales.
func (mr *MockSalesRepositoryMockRecorder) UpdateSales(tx, updatedData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSales", reflect.TypeOf((*MockSalesRepository)(nil).UpdateSales), tx, updatedData)
}

// MockCounterRepository is a mock of CounterRepository interface.
type MockCounterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCounterRepositoryMockRecorder
}

// MockCounterRepositoryMockRecorder is the mock recorder for MockCounterRepository.
type MockCounterRepositoryMockRecorder struct {
	mock *MockCounterRepository
}

// NewMockCounterRepository creates a new mock instance.
func NewMockCounterRepository(ctrl *gomock.Controller) *MockCounterRepository {
	mock := &MockCounterRepository{ctrl: ctrl}
	mock.recorder = &MockCounterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterRepository) EXPECT() *MockCounterRepositoryMockRecorder {
	return m.recorder
}

// CreateNumber mocks base method.
func (m *MockCounterRepository) CreateNumber(tx *gorm.DB, data *model.Counter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNumber", tx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNumber indicates an expected call of CreateNumber.
func (mr *MockCounterRepositoryMockRecorder) CreateNumber(tx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNumber", reflect.TypeOf((*MockCounterRepository)(nil).CreateNumber), tx, data)
}

// GetNextNumber mocks base method.
func (m *MockCounterRepository) GetNextNumber(date string) (*model.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextNumber", date)
	ret0, _ := ret[0].(*model.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextNumber indicates an expected call of GetNextNumber.
func (mr *MockCounterRepositoryMockRecorder) GetNextNumber(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextNumber", reflect.TypeOf((*MockCounterRepository)(nil).GetNextNumber), date)
}

// UpdateNumber mocks base method.
func (m *MockCounterRepository) UpdateNumber(tx *gorm.DB, data *model.Counter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNumber", tx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNumber indicates an expected call of UpdateNumber.
func (mr *MockCounterRepositoryMockRecorder) UpdateNumber(tx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNumber", reflect.TypeOf((*MockCounterRepository)(nil).UpdateNumber), tx, data)
}
